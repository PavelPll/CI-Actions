pipeline {
    agent none
    stages {
        stage('Build') {
            agent { label 'aws-agent1' }
            //agent { label 'aws1' }
            //{
                //docker {
                //    image 'python:3.8-alpine3.16'
                // }
               // aws-agent1
           // }
            steps {
                //sh 'python3.8 -m py_compile sources/prog.py sources/calc.py'
                sh 'python3 --version'
                sh 'sudo apt install python3-pip -y'
                sh 'pip3 --version'
                //sh 'cd ./CI_CD_githubActions'
                sh 'ls -la'
                sh 'pip3 install -r CI_CD_githubActions/requirements.txt'

                sh 'python3 -m py_compile CI_CD_githubActions/prog.py'
                stash(name: 'compiled-results', includes: 'CI_CD_githubActions/*.py*')
                //stash(name: 'compiled-results', includes: 'sources/*.py*')
            }
        }
        stage('Test') {
            agent { label 'aws-agent1' }
            steps {
                //sh 'pytest -v --junit-xml test-reports/results.xml'
                sh 'python3 -m pytest -v --junit-xml test-reports/results.xml ./CI_CD_githubActions'
            }
            post {
                always {
                    junit "test-reports/results.xml"
                }
            }
        }
        /* stage('Deliver') {
            agent { label 'aws-agent1' }
            environment {
                VOLUME = '$(pwd)/CI_CD_githubActions:/src'
                IMAGE = 'cdrx/pyinstaller-linux'
            }
            steps {
                dir(path: env.BUILD_ID) {
                //    unstash(name: 'compiled-results')
                //    sh "docker run --rm -v ${VOLUME} ${IMAGE} 'pyinstaller -F prog.py'"
                //}
            }
            post {
                success {
                    archiveArtifacts "${env.BUILD_ID}/sources/dist/prog"
                }
            }*/
        }
        
    }
}
